{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentpool1Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int",
        "defaultValue":  3
    },
    "agentpool1Subnet": {
      "defaultValue": "10.240.0.0/16",
      "metadata": {
        "description": "Sets the subnet of agent pool 'agentpool1'."
      },
      "type": "string"
    },
    "agentpool1VMSize": {
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F8",
        "Standard_F8s",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string",
      "defaultValue": "Basic_A4"
    },
    "apiServerCertificate": {
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      },
      "type": "string",
      "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUtIekNDQ0FlZ0F3SUJBZ0lSQU8vcUs4cVVIVWZqd3FMS3d2alJseVV3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTVRZeE1USXdNVEV5TmpNMldoY05NVGd4TVRJd01URXlOak0yV2pBVQpNUkl3RUFZRFZRUURFd2xoY0dselpYSjJaWEl3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLCkFvSUNBUUMySlZoaXZQZ0hsb2hxSkFkZDgxMGp0Nzl5cFpoRXdMYW1seUN1S3lzeURaTUkrQnQ5eVljMFJvUVEKS3U0MnNDVitNeElqekwwR0l0a1lpSG9iN29RVzZHRVRpdEduMyt5SXJ1dGtNTm9zNTduUExySTRKdGE1aUtnQQpFalpmWGI4NnUzRm1qcXlEYXpKdDJ0KzB3Wm5YRWd0VDZuc0JPL1U0M2NQM3FueDdjcWhqQUNscjBIV213bldyCk5EZXZDLzF2SGQ0VkNEWmEzN1pwbWNXdmVkYVhoU2FYRXFVbmI3aGN5TStsTVp1ZnQwS3FCdDBjVjh6Tmg3bHEKMGlVRm5pN1VrelhDVEUyN092MHJ6Y1I4MXVkL3NHTzlRT0tDZlZFNzBwNkRpOEtWbEp5aDB2aHZRck5iZTVVWQphSExBaGZjTEJ3Y2s3dng0TTQzMnVIVkFNMVduM3lobnNqV1RrK0VLaERleVdBNk5WeWo5ZFV0alJLVjBFdnR4ClJzUGwwekhXTk1vQmVyOXR3Qm0yc0FCb3RFWFpIRnpabWhmZUk5aHpmZzZGazF5dHhGbU1ySWhMVWJET2ZqN2MKajJrYkF1TnBrb3pGWHJndlVCVzdodnUxaTgrT3pKdG9tK1dCcUJiR0pkQi9HUklYWlMrRCtESlhxQlZ1NlJ0SApYTlJxdGZGckZaY1BUSkJ1djdYVGJBSWhBTk5veXVSbUgxR1RUTmJrdjkwdW90cWE4K0l3Wmd5N1hEbGI0TE1uClgveDJhUHh1THhDRXE3cm5rZkZ1UFVETTJ3L2ZyRTJPakZEU0VBV3ZTTndxeWgrdmlBM3N6aVd1d2RkN1gvYi8KYUU0T0R3cXp5ekk3WUlGamNkNVljTEQvR1pKQm5iQkN2N3hzSmVZOEl2UVdEUjRsY1FJREFRQUJvNElGY1RDQwpCVzB3RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01CTUF3R0ExVWRFd0VCCi93UUNNQUF3Z2dVMkJnTlZIUkVFZ2dVdE1JSUZLWUl1WkdsdWNtRmpjMlZ1WjJsdVpTNWhkWE4wY21Gc2FXRmwKWVhOMExtTnNiM1ZrWVhCd0xtRjZkWEpsTG1OdmJZSXpaR2x1Y21GamMyVnVaMmx1WlM1aGRYTjBjbUZzYVdGegpiM1YwYUdWaGMzUXVZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaXhrYVc1eVlXTnpaVzVuYVc1bExtSnlZWHBwCmJITnZkWFJvTG1Oc2IzVmtZWEJ3TG1GNmRYSmxMbU52YllJdVpHbHVjbUZqYzJWdVoybHVaUzVqWVc1aFpHRmoKWlc1MGNtRnNMbU5zYjNWa1lYQndMbUY2ZFhKbExtTnZiWUlyWkdsdWNtRmpjMlZ1WjJsdVpTNWpZVzVoWkdGbApZWE4wTG1Oc2IzVmtZWEJ3TG1GNmRYSmxMbU52YllJdFpHbHVjbUZqYzJWdVoybHVaUzVqWlc1MGNtRnNhVzVrCmFXRXVZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaXBrYVc1eVlXTnpaVzVuYVc1bExtTmxiblJ5WVd4MWN5NWoKYkc5MVpHRndjQzVoZW5WeVpTNWpiMjJDS1dScGJuSmhZM05sYm1kcGJtVXVaV0Z6ZEdGemFXRXVZMnh2ZFdSaApjSEF1WVhwMWNtVXVZMjl0Z2lka2FXNXlZV056Wlc1bmFXNWxMbVZoYzNSMWN5NWpiRzkxWkdGd2NDNWhlblZ5ClpTNWpiMjJDS0dScGJuSmhZM05sYm1kcGJtVXVaV0Z6ZEhWek1pNWpiRzkxWkdGd2NDNWhlblZ5WlM1amIyMkMKS21ScGJuSmhZM05sYm1kcGJtVXVhbUZ3WVc1bFlYTjBMbU5zYjNWa1lYQndMbUY2ZFhKbExtTnZiWUlxWkdsdQpjbUZqYzJWdVoybHVaUzVxWVhCaGJuZGxjM1F1WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2k5a2FXNXlZV056ClpXNW5hVzVsTG01dmNuUm9ZMlZ1ZEhKaGJIVnpMbU5zYjNWa1lYQndMbUY2ZFhKbExtTnZiWUlzWkdsdWNtRmoKYzJWdVoybHVaUzV1YjNKMGFHVjFjbTl3WlM1amJHOTFaR0Z3Y0M1aGVuVnlaUzVqYjIyQ0wyUnBibkpoWTNObApibWRwYm1VdWMyOTFkR2hqWlc1MGNtRnNkWE11WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2k1a2FXNXlZV056ClpXNW5hVzVsTG5OdmRYUm9aV0Z6ZEdGemFXRXVZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRnaXRrYVc1eVlXTnoKWlc1bmFXNWxMbk52ZFhSb2FXNWthV0V1WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2loa2FXNXlZV056Wlc1bgphVzVsTG5WcmMyOTFkR2d1WTJ4dmRXUmhjSEF1WVhwMWNtVXVZMjl0Z2lka2FXNXlZV056Wlc1bmFXNWxMblZyCmQyVnpkQzVqYkc5MVpHRndjQzVoZW5WeVpTNWpiMjJDTG1ScGJuSmhZM05sYm1kcGJtVXVkMlZ6ZEdObGJuUnkKWVd4MWN5NWpiRzkxWkdGd2NDNWhlblZ5WlM1amIyMkNLMlJwYm5KaFkzTmxibWRwYm1VdWQyVnpkR1YxY205dwpaUzVqYkc5MVpHRndjQzVoZW5WeVpTNWpiMjJDS21ScGJuSmhZM05sYm1kcGJtVXVkMlZ6ZEdsdVpHbGhMbU5zCmIzVmtZWEJ3TG1GNmRYSmxMbU52YllJblpHbHVjbUZqYzJWdVoybHVaUzUzWlhOMGRYTXVZMnh2ZFdSaGNIQXUKWVhwMWNtVXVZMjl0Z2loa2FXNXlZV056Wlc1bmFXNWxMbmRsYzNSMWN6SXVZMnh2ZFdSaGNIQXVZWHAxY21VdQpZMjl0Z2dwcmRXSmxjbTVsZEdWemdoSnJkV0psY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11ClpHVm1ZWFZzZEM1emRtT0NKR3QxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmgKYklJV2EzVmlaWEp1WlhSbGN5NXJkV0psTFhONWMzUmxiWUlhYTNWaVpYSnVaWFJsY3k1cmRXSmxMWE41YzNSbApiUzV6ZG1PQ0tHdDFZbVZ5Ym1WMFpYTXVhM1ZpWlMxemVYTjBaVzB1YzNaakxtTnNkWE4wWlhJdWJHOWpZV3lDCkltUnBibkpoWTNObGJtZHBibVV1S2k1amJHOTFaR0Z3Y0M1aGVuVnlaUzVqYjIySEJBcncvd1dIQkFvQUFBRXcKRFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUQvYWV0U3dHY28wRmp5bXNBM0dxT0FBVmF0a3ZLb2YvWncyQkVPVQp4N2dweVljWnVnV09JSTc0L0hQVE5RV2grZG5rbkE0WDNLb25UakZKdzJlK3RYODFmd2EwR3c4Vm43bkMxSWFnCkhLU3pQUDVZMzEzTlFwelFxaUVjZC9Qd1AvQThQSnFHQnRlWGJsNFdVVjBUWjZxaWp6anRXK2hORlpnaWp6SUQKZVZZdktDcnNNeE1FRW5PMERyWUU5NkVpTnpNUXFxZGUyajFPWEljUVJIZTZRSm5Vb3crdzAweDk3TWs3S3hZSgpSbFEvYzUvUGkxUUtBRW52dzVKRkpObW83NWdBa1ROSGNOWGpUcHhjclZva1RxTDFBZml2NHhnb1FXZjRuOWhBClIyNzVxSEUzNFBFZ3VZRmlGYWUzMnVtVE5xQjliTDNrU2k0UG55T2pWOHlIOUZDS0p4cmthRnY1bkY1RWFFejgKWkVSS0hKUGNVTGVHWlFKYlFjZTJZRTdLbXZpZis4ZXFNVlFjRWxkVzlNbnp3NjlNTHQzcUFiYkZwVjg1eWhlQgpTcGgyYnBGK01MUmMvRFV1clAvSHRDQ1h3MlNBUjd3R0U0MFRUbFNFRURYZlNodFVjM3AyN2JJc1l2SUw4b2YyCm9vVmhKOHdQc1c4aEZHaWxLL3dIMlZrRTBFa290Q3JEbzI3Y2U1L2ZFejRhTlFrVVZCalQwVExsMXJ5NzlrUTMKR1FLY2hHUHBwaDNFeitOR3hGaDBnZE40T0tXR1ZGWUMrYXZLQlo2ZTFJKzNVSmVxdWt3QllXKzFrUmhVVnkwVwo5T2NiTE01OHNsTDZLWEVCamJMOTJURmVHaVl0QXp1b24wZWtvZXg5UVpsOVJuS0ZGajVRb1hLWThVR2M4NWQ5CjRVemsKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"
    },
    "apiServerPrivateKey": {
      "metadata": {
        "description": "The base 64 server private key used on the master."

      },
      "type": "securestring",
      "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBdGlWWVlyejRCNWFJYWlRSFhmTmRJN2UvY3FXWVJNQzJwcGNncmlzck1nMlRDUGdiCmZjbUhORWFFRUNydU5yQWxmak1TSTh5OUJpTFpHSWg2Rys2RUZ1aGhFNHJScDkvc2lLN3JaRERhTE9lNXp5NnkKT0NiV3VZaW9BQkkyWDEyL09ydHhabzZzZzJzeWJkcmZ0TUdaMXhJTFUrcDdBVHYxT04zRDk2cDhlM0tvWXdBcAphOUIxcHNKMXF6UTNyd3Y5YngzZUZRZzJXdCsyYVpuRnIzbldsNFVtbHhLbEoyKzRYTWpQcFRHYm43ZENxZ2JkCkhGZk16WWU1YXRJbEJaNHUxSk0xd2t4TnV6cjlLODNFZk5ibmY3Qmp2VURpZ24xUk85S2VnNHZDbFpTY29kTDQKYjBLelczdVZHR2h5d0lYM0N3Y0hKTzc4ZURPTjlyaDFRRE5WcDk4b1o3STFrNVBoQ29RM3NsZ09qVmNvL1hWTApZMFNsZEJMN2NVYkQ1ZE14MWpUS0FYcS9iY0FadHJBQWFMUkYyUnhjMlpvWDNpUFljMzRPaFpOY3JjUlpqS3lJClMxR3d6bjQrM0k5cEd3TGphWktNeFY2NEwxQVZ1NGI3dFl2UGpzeWJhSnZsZ2FnV3hpWFFmeGtTRjJVdmcvZ3kKVjZnVmJ1a2JSMXpVYXJYeGF4V1hEMHlRYnIrMTAyd0NJUURUYU1ya1poOVJrMHpXNUwvZExxTGFtdlBpTUdZTQp1MXc1VytDekoxLzhkbWo4Ymk4UWhLdTY1NUh4YmoxQXpOc1AzNnhOam94UTBoQUZyMGpjS3NvZnI0Z043TTRsCnJzSFhlMS8yLzJoT0RnOEtzOHN5TzJDQlkzSGVXSEN3L3htU1FaMndRcis4YkNYbVBDTDBGZzBlSlhFQ0F3RUEKQVFLQ0FnRUFsRythdDl5SHhLZElSRGRZU1pncUx4RnZVMTdmMkNlMHNjNDNNN2k2V3UvMUF6b3VMVFF1bXN0YwpsRkJvRU9rN3BMeTU2N0xOMkZKTjJWQmZNcVFOd1IxZS95NEI3V3p1dGZUV242K3dIU2c2cER6SndEam1oQXg1CjNKVDYrbnpMZW5HRzJLMHNxV3lTakRQeVdydnJRdm5SZ1hGMURHeHdTd2R1ekVhRGE1Yms0c2tlK0YzSmd6eTEKNSsrRjhZRXo1M25Qb2hRdk41OVlhSGFJUTVobTZOUDV2dVBTODNCNExpVDRFd2Q2YTQ1TkpZS3lib2Fld0YvNwpHckptdVUxUG5LemJBcHhzUEVpMlNSeEhJL1YrY3ZDc1YyNnBLTzQzWlNrZlJOU0FucVdkZjhNTjhwM0l6S1RKCnZEcGlTY0xpc0hucHVJK0o3K3NUcGh4c2NRVmtweWo3V2FIMVlWRzQrNnRsV0dURWxhOWRqYlFEeFFVSEdNQTkKUm5KR0lCRWlhamlHcm9mQ1J0UVZEOEhwV0srY280SlBmOHl5QmJxWFhOcWtEZGpQbSthN0tmemtXdWsrd0s0WApDZUdJb0d5REczL2UyclRyMzVnQnVMWHVoUFBZRmZSdGh1aHBFbVpZZ3IzNEExVEFYTlpVWXk3VjhBdGNCUHIrCkNLT3lLSzFPdmxwcTFLbzBiQ3N3dHJRSUVEM3VBbVc5QmhsanhjZW44OURyZHpRVkowWHdtM3dwRmM1UC9UcloKWXU5SXY5WFpkNGtnTnFLZXNwVjhWS3VwT1R0WGw4Y0k4V25MdThKUkZrRWQyenBHRWpYSU4vVUdpa3FlK0dXUApjamhSb1BXeWdYOGVObmlHSjNlSmNPVCtIbHZCUHV4UkR5eGFTazlnRm1pSUJGSmVPSUVDZ2dFQkFNczlPeUk5CkNIalF6Wk5oQ2toWWV5Tkx1QTl2b0pESmFtSlpwSWd6R0QreGdyYzZWQVQyL2EzRUZSQ2MxaTI1QU14bnFpK04Kb3FOc01aS2plUkU1L2YyNHcvWUs3cjlTY3hoYzN1ME1IeEZGQWVoaTBrQXNtckpkVXU2YngzblAvYUNaMFVScwovald1czRqekhxcktVQWplMW1rTE9tWVRIZzFPRXI0MmlaZlZsNG0yc0dqV0FUeXpFVUlucGxvOUNtUzYzdllQCllDOVJjL3MyejRjYzkxa09DTHlseWJRR1JKaGFuL0JZb205cExZNGoraDVXTXZJd3FseFlBMmdtQ25aenlKK2oKM2tvdThZVjhoTkc2b1U5c1V1d2dMTWE0NWlBYnRsMGEzLzNYZ2NsU3NReUZJSGp1bFkxNmxxWnkzRkErbkhUawoyVVV5V2xuVjZtdyt5WnNDZ2dFQkFPVnVUbEh1WjN4OWlaekhUTCtvbVl2UXRTR3I4QS84YWF5SjF2SlpmeFcyCnBaTnFFSHBOMENNU3ZLbGtYWHp3SlorZ2dhWWZGTW5CUmlES3VIZmU4Y2NoakNucmlCRm01aVpyeE9yVFkyQ24KSEFnUURiYXIvL2VaQ2JDVEwyYXVZUm95WTlvN1ZtNWR3SmptNFYzWnQ1dEdJQjllTDFuaEd6ZUM4eDJsQjNkcgpoK0l3Tmt1R3lIaVlkQkZSVlFybzQzRmNzN0JYKy83SFE3VUNEcFZRNlVQbDhOZU1sek55RTdQcDh1cm4yODNrCmU0UWdpanRpSmxiUzBPREVHcmlmZ0xPZmhkOS9oZ2oxd3J6VnhjSStWN1p2RWsyMGhncENuVFFwWmRmTUl5UkgKbzBaSTBBSm1qc0Y3d3ZqRWxJQXBpMjR4R0pPbm0rR1N1UmppdjZ3T3MrTUNnZ0VBUVhQY3dYQUtkRzQ2Wm9aUAorM0NUWjVDUkhGZUV6Rnd4YUs4Wjc4c1V1aDUrekdkNmU0Ylh0OGg0U0R0YU5xdG4rR3hDUU1KS2FIc0ZsQVlWCmpWaXgxYTVWWGIyem1lWUJyd3pwdGttN0Q2Szd0STF1ek1BUXFmU29LclA4ajl4T0FCVEpjbEh2cEhZNDE1Z0UKZmxoZFloM3h5eTZVaGg4T0JKYnFMbHY5LytvSHZaQWFUQWp2cVE2Nk5pWHl5d2p4ZWZNOHJ0M1F5aXhmUDc0dApJNFJPbkYyS3JzWnRxUTZEdE5VcXdRcXFkVnJZRXZpL0tsbjBXazhWN2x0aDdYNml5L2NKMjIrNHZRZFZQUG9YCkJEd29peDJGcnduRm9kSVdPcXp5RkJYOW9SQndlZGVwc1RDR2ZxdkhlaUxLdFp3MEc1dXVZMjc0RWZMZmFpTWMKTmZRYWxRS0NBUUVBMHhLaElVVklsY0pVeVJTZDZqRnRXYkRnQXlOUWp4UjBEOVVjR0FmNEgvelI1WVlOdE1kRAp0aEMxMnMxSUtQb3lVdUh5aE9kUlU2L3BHYUFIQjlqbTdJRlRsdmxtVEVRemRxTnRIWER1bTJ3Q0lQVEwrUVBTClVITE45RkhrcVAzQ3Zid2dHeFMrRm5sUUNCdFl1T1BreEFoRzR6VGVNVDBrc2ZSYVFDcWtiTnhUdmVjRy9JTDYKaWVBUDRDTElMMnBFWFBXaEpwbzdicERhSEh2UStOUGdWcVFENS9vaTNLU1Z0YzZFdWxJbTZRdk1DcWw1SXRyUQpWTTVNZG94VDNRaDQra2ZIZk8rd1d5dm1SWjRSK3ZzcDdOL1FvZ1p6enBxc1QrSEtIVGRrR1N1QzdkVnM4Tmh6CmUxT2w4d0cvY1ExSGhrL0t3WVRRcHowNTVzZ3MrRmpxYXdLQ0FRQWRtQ1hBTmw5Ym1nc1pKTkZSdGtjbDh2V2MKdFM1RlZVUkNMaWE4ZzBYdDN5WVF3MjRqTGtJbmZ6SEVaSnFlTDZBVHVhbkJucnZlcFcrQ0RlYTVJUHZ6WkkybQo5V2tOMGJBVHdOaEw2QzUvc29VMWp0SGU5eEpNOC9Cdzg3MUsxajh4ZkdaRUNPSnIxMFZ3cU9MYXlyMURrMGhoCkN3a200Rm5TTTB2QVJ3UEtiVm9yd1BQOEd2ZEkvMGxGZ2YyTnpkcWw1YXdSd1hsN2E1ODhVTGoxajUrcis5OEoKcW01SVArczlSMTlUOXdWbUVsUU1aekM1M0h1MERlRnlQa1pNMCs5ZFA4KzlXZWFFRXAvZ3RrRXJkbC94YXp2WApnd2dUNG9CUEd6enB0dkNjenlyT01uWXRuTnNqbmZkTkgvb2ZySUNZSloveGlIbGJ5b0UwZTZYdjRSNjAKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
    },
    "caCertificate": {
      "metadata": {
        "description": "The base 64 certificate authority certificate"
      },
      "type": "string",
      "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUV5RENDQXJDZ0F3SUJBZ0lSQUtPWUFLZWNURzVHRHJ3ZFBKZzhRTVF3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTVRZeE1USXdNVEV5TmpNd1doY05NVGd4TVRJd01URXlOak13V2pBTgpNUXN3Q1FZRFZRUURFd0pqWVRDQ0FpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBSzE5Cm9URjEzSUgvbnR2ZHF5TEtjT1pOQkpXcFNNbTFLTXlxVFdabS9uMUozcFk3YURQNDdmN3dGSnVsU1Njak5WdnIKb2NnV3NZUXAyd1JkODNlL1RnbkVWMjVXVjlxTmFKSmtGenBEd1ZqbWphNVZPQ0xxRUtIbGpyc2xlT3JKOFdFSwovUEliRHNGNkVBWDlCL0FDZjdURnhBRk45RkFRSVdHYm4xcmlNUVZ3RitDc001TWVoSEtwZHJrQ2RHUHFFWXZzClBZelVuT1E2UmlJMitpU3A3ZGRWYmtsdjAwOUxiSXhIM2I3dWN2RytkNHNaMmZXUHB0cUFENllGcTJoSVU4aEgKallNeGxCb2JtUERHNHEzemFuZWJleTR3WWgvVDZvWG5OYW56SVppOWlrdVM5SnNMcTRuK1pMTURXZWIwUXlpawpIVzdsM3VCNzhQWWw0aVY5M0lZMmM3Njl2NmtZWjNBNDVTT3daRm5aMnlYMFVKWlFRNUM4OFFmdVNTKytzY2lLCmp0dDFGd2lFVWxXdHdzbDM1RkJBODZlUE9LQkIzTHVyc3NyQ0J5WGk3TWp4aysyUHg0VHcxNlBpRmtoSUhKS1gKcnVKcFZKMHdaSjYxa3JFQzJOeDZGSjhNS2twWXEzTmNlWVZIdzFQYnNSRGpBaXo2TWpVbTY1VWlRRVpPWkNpNQpwNmdZNU9Id2tLSFN3SVE3Qnc4U05TNjA2TzBNRXA0QkFIYkFjcWZoVW04cFcxREhuS0hmeTJXRUJ2VVAzNGppClJvUFEwZ0xRMC9VVzFwVDhQbWdMR0RMcFkxMzBRbnpqczZ4a3l0WDhqYzhwOUtGRDNyYjZJZlcrSi9ZUlBQZUYKRk1YUUh2c1JEUnlxVFNFUmhZODVTdjRCdldBcTNlbkNtdnZqRVpsVEFnTUJBQUdqSXpBaE1BNEdBMVVkRHdFQgovd1FFQXdJQ3BEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQXBRbnBiCkYrZUdIcTJaV2VJYnZOM2NYbUtlb1BZV3hCN0RPM0NEUmxaMG8wK2tyU2JwK1h0NlhOVmNiTkVQVG9ralVydkYKRUNlc0REVWxkMGFkVGM3OXJCdTFQcFh1ZHJiTTFLRURXUWUyR2dxUTdaWUNzd21HamhMSkFnMkpFN0tiQzJJcQo5Ni81QzBhd2szelFDLzFseVExQzQ1TW1TT1ZOdlJDd3RjbTdIdXg5TEVwZ25ibFM4TzlFZzBWTDA3ZFk1RGZ0CjRBaW16QmpyTk9KQ3YvM1I0UXF2ZU9LdENiV1Y0dHhUaGMzNElXTXdleDBrczF2dnRwZzhzUmVsbHYzUWRVblQKMHZqZjhNdWVEYVFvaXdNNUJveUdyVXFCM2czaVJ5QlJJVVhvZUVmTG82dE8xNTJOMnphYjMxM0ZyWGRGMkcvYwpLWlFPYjRWdTN2dG1xOXdiQTdFcUZuOUZCWUdMYjg4YWdPc2p0Qks2MVUzbjkvaCtGMTFQWU5OSWw0SlQzT1pPCjdHSFFFKzYrQjNUaEhocUtnWUE1SDBnelN5S2J1Qkw1cDltSEJ5UG9VS0JzUjlwME9NU1lvS0s1OGtRRmZ4WlgKakFmU2xjb2lzb0ROVnMvRS9adXpGd004SzRFRWJUdUN2ZG14UHFtTFpSOUczOWNkT1Z1b3BaeGVHVmhza1ByegppSEVxeVdxei9iTzNsajIyeENtRHVOYzRTRm94K3NZWUJzRTZYYVNuM0FMMURSNkMyZU1JZGsrcmtlMkxMaS95CjZxeE95SFY0em9hU3M1WE5xS21UMG5GRGdoZ3FzSmhOR3c3VXExZU9JZXBud3Jqem9NMWxUTTBXbnhFTTErRFIKN1FRbExkcm5XSkREb2tMZ0NqaDV3YTF0eE5JeHBUUm5xaWZ6bEE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg"
    },
    "clientCertificate": {
      "metadata": {
        "description": "The base 64 client certificate used to communicate with the master"

      },
      "type": "string",
      "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUzVENDQXNXZ0F3SUJBZ0lRSnpPL2RYL3QyWElFa0Q0SmFHWUZ1REFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB4TmpFeE1qQXhNVEkyTXpaYUZ3MHhPREV4TWpBeE1USTJNelphTUJFeApEekFOQmdOVkJBTVRCbU5zYVdWdWREQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCCkFKZkM0MjgyYUVIWDNLdmx6OG4yVk53MWg0NUp6L1VmUDRKUkFGeENRb1FQM1RmcE0rL2k0QVgwUGVaWWR0RXgKb2RDWnYwWmlJaXlQcHB5QmFvbUt5OTZyWlNvVG05N0lad014Tm9ld0p3aFdjbzN1N3RJQSs3c2RZRW03T0Z3OQp5TS9GbHdOaUg2ZEttdXlqL3lRYTlQYjhzSStTN3AraEcrV09wU1k3VE4vVW9oVWdrQ0k5YUtvMXRyd2tJdVRXCnRzcGQ5MzVpdk14TFV0NEpuVU4vUFFUSGxXNm5RWk9PekRyMGdmVjJieGd6MHJhZXhLVEhRdWR2dThxWGpTbncKQUx0WEhzdHMycEZVMG1mdGdxWE53RjJjaUJadlFSRG5VWTFVZUJsNWlSaFRFOWhNOC95YkxSbHlYQVM2VDF4bgpTZ09sY3BtWVJDMERiTUFvajNWVGpDbS9pcGhQbTZrWDUzbkJ3L3BHWU9lU2wxMjdhN3IzdmZ5eWcxRFNaQ3N5CjZGdTVkd2hhcTdQYWdXWmd1czVHTmM1ZVl3bERIbGU4cWVXQzZDSmNaUTBoMHV3RkVnNXA1YVhJRzBjd1ZUbFYKUWZNQ1NkUTV3OVFRZis0UTBjQ1dESys3K1dkekN0UFhEM1RYcWFwRkhuYnoybE1Yem5EaHNVdVlueWZGQUYvbQo0b1RDdzhXTytVaENnS2xiZ2VPQzNJQXo1bHhCMHJSV3VmOFgzSXhFcnpQbk03TnI2THhPQkdDaEdaN3JsQXVSCnE4YkJmb2RxcFF1MUFpTFI4SnVKRk5RSjQxdkRRcmN0SWdNYU8vdkJGWXpYaUpXN0hBais5eERYT3Q5Mk4vdjQKQ2Qxd2R3MENWOEI5V1pVNXVFQXN5a3dkcTdDN3E1VUNGN1dRV3pqa0Q4MnZBZ01CQUFHak5UQXpNQTRHQTFVZApEd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElDQVFCTTQyck5rNmNWL09hQlR5OGlRS2RwdnZOWkVPY0V4NmQreXI1djhMeFoKV2JIOUI4TlFYY0hXUE5ZREJuMC9Td25YOEFoMEFyc1lDTnExelRwTHdlOGJZV2NNRXlYdGhSKzFvTzNqN0x1YgpEMUc3Unp0ajl2T1A0T1JYbVFNaWcvMitOMVJkaG5uVGErSi9lMXEwR2V3Q0tHaVg2N1pRbEc1Q2hqNzNNem0vCkloYmZ2NUFJWTRYUTh4OG5pclRSWkxJSnFpbWg1Z09DVEkvS1JTOWdDVWZxWjBzZngwTEFKVldzMFZ2U0pxcngKenB3SFBoVzVEaXNYU2NwUVJVcDFWMW1BTUFSMm5JUFEzakExcmg4MW4zQnRURkZNTnJXQlZaa0VTcGR3d1BKMgpFY0J1aU9aSUlxMmEzRXhGZjliNlVweGRLYng5L0VlM2VsZVUrbks3TUgwYkR3WlU4VzVjUTJZNkh1aitzcDdaClVBQk9kWE0yYmxRRFRIdnpURXU2S05EZXc3dHRxUndSdG10YmorRG1uVmIwTEVCMmVyNC9NZEw3MnVDUTFDYkYKdGhPczFROUQ0SXNTSjBaVmgzUjVqdkdOVW1DOHZseTJlb05tRWVERUFwbkE4bGlUdDdwb29YNnMzam9TWGlGZApWdXplQ1M2ZjgrS0c4YStBL2pjSDhOMEVBTlRVaFFhZWxaN1B0VGo3bGtQcE5UbEJiMlNZYVRTV3RPWHdMVUo1CllJVmNPR3VqRUhOOUFzUGdhdDdCYkZUNjBVeXk5QVZ5Mk1oM3VTZnI1MGlJS1NpQU1RNlB3cXZBMWdISGU3cmUKblhOcDVib3ZMeGtvN3hxcFh4UkhxaTdjY3ZJeUhqNXRVVEI2Q1JWaWNud292cnFrSmpYRU4vdHdiQUlsaGR5cwpUQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
    },
    "clientPrivateKey": {
      "metadata": {
        "description": "The base 64 client private key used to communicate with the master"

      },
      "type": "securestring",
      "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKSndJQkFBS0NBZ0VBbDhMamJ6Wm9RZGZjcStYUHlmWlUzRFdIamtuUDlSOC9nbEVBWEVKQ2hBL2ROK2t6CjcrTGdCZlE5NWxoMjBUR2gwSm0vUm1JaUxJK21uSUZxaVlyTDNxdGxLaE9iM3NobkF6RTJoN0FuQ0ZaeWplN3UKMGdEN3V4MWdTYnM0WEQzSXo4V1hBMklmcDBxYTdLUC9KQnIwOXZ5d2o1THVuNkViNVk2bEpqdE0zOVNpRlNDUQpJajFvcWpXMnZDUWk1TmEyeWwzM2ZtSzh6RXRTM2dtZFEzODlCTWVWYnFkQms0N01PdlNCOVhadkdEUFN0cDdFCnBNZEM1Mis3eXBlTktmQUF1MWNleTJ6YWtWVFNaKzJDcGMzQVhaeUlGbTlCRU9kUmpWUjRHWG1KR0ZNVDJFenoKL0pzdEdYSmNCTHBQWEdkS0E2VnltWmhFTFFOc3dDaVBkVk9NS2IrS21FK2JxUmZuZWNIRCtrWmc1NUtYWGJ0cgp1dmU5L0xLRFVOSmtLekxvVzdsM0NGcXJzOXFCWm1DNnprWTF6bDVqQ1VNZVY3eXA1WUxvSWx4bERTSFM3QVVTCkRtbmxwY2diUnpCVk9WVkI4d0pKMURuRDFCQi83aERSd0pZTXI3djVaM01LMDljUGROZXBxa1VlZHZQYVV4Zk8KY09HeFM1aWZKOFVBWCtiaWhNTER4WTc1U0VLQXFWdUI0NExjZ0RQbVhFSFN0RmE1L3hmY2pFU3ZNK2N6czJ2bwp2RTRFWUtFWm51dVVDNUdyeHNGK2gycWxDN1VDSXRId200a1UxQW5qVzhOQ3R5MGlBeG83KzhFVmpOZUlsYnNjCkNQNzNFTmM2MzNZMysvZ0ozWEIzRFFKWHdIMVpsVG00UUN6S1RCMnJzTHVybFFJWHRaQmJPT1FQemE4Q0F3RUEKQVFLQ0FnQk94Ky9TMnJhU2Y2RmhadUpRSUZ6N0Y1cXdCYWM3d3lYdjIyYkpmZWdUc0R5UmVyRG9kYWovemtPWAo0UktGRkRQQkd4OE5SWUlpQ2N4ZThGdkMzTmRxVnlVa0M1dmRzY0N3Q29zWk14dUFHNGhLSDkvQUNweWpET1BnClFwMUdYUmh5cTByeWlheU81bzY0QzRZMlV2d1pmeUdVMXB5akp6cFpGNHlwNVJ6S0VSSzJ6dm1qbktkSnZLcUkKem1XQ3orZUI4L2UzbDBBVStZRWlISEdVQ1dnK28vRHh5VWVrZHZ1VUd6dWZsZ1NqMXJzcTdBNSt6Nlh1aUxVKwp2UitkeHFaS21qWTFPZVBZaitUTjZLRHF1MzJCMnZGV1hCaTEwcThtSTlSWXZSdXJFZTE2V3JCSjBMQS94bnI0ClJWTlBUNXMvZTFLYlkwejQ1UTgrVFkvelF4UytCclRsM1QyZ3BhaEtwUE9jdnJlU2xUVjdoR0hZUi8vcVBaemcKaW5aVWpYRDJYNEQxSDcyNktOeHJ2Mk5RUmFDYzByZFZ3Rnh2K0hRTTZMRFBoRkx2cSsxU0U1M0oxWDQ2MUE5Vwp2ckk5RWlXNC9yc0ZrTzZLZXBZR3lsenpNOTFseko1YndST01zY240a0dnRUpIeVBwek9GTjh5R0tXR1dmYnRuCkQxdHl2UmFNSmsvVnNoUXNSQkV1TXpSWGlUbWYrYlUzRS9GOFhOSnc3TEhzVXE1dGo2VmhmaXJ1YlFSZTNwcVIKZVdjdEo1ajdRZVpSOHlvVFo3VFlVeDR3WDRaQ3o2NVNTZDBoZFYyTG1CNjNTVW5VRDFQemJJV2VlY1hzZ0tOMgp0b2lGaHB3MVk4M0tyS1JCSlUwcHVmanVOUmtlSWxsbTRQQmg1VlhFRTZLWXNVenorUUtDQVFFQXg1enVSL29xCnRvYTdxMG4yamVSc3pYV21MWU44OTVzc0JkRHk1Q05BRlpEbzA4TTQxa1lTckt3b1BPNnMxcFFQMTJxdmJIck0KY1E5aTNSZDVkQ0g0Tnloc21qNW9ud0dBYWhBd3kzek1qSDkrUk8vQ3k1bmZXclNNNXJXc2RaaUxFU0VhM0RVWQp2QzlPU2N5UXpDQ0E2SDNXR2t2TzQ3NHNrc3hKb1VsazFKVmJYdmNaYjRacW9HcDF1QitCM1lJM04zMm1PQjhGClB3S3hiM2FsYjZ4NlEzOHZvSmZhbjBINVZnV1ZMS1lQcGxrNzE0elAySzJrb083ZEhJK2FYdFFzamdGbHZuanAKK0NpQ3hRWTEzMm16N0tXWmQ5OFUxMytJZFM4YTMyTlRmRDFJRitxMk5Zc0VLZnVuZCtxOUtlNGg3ZUFYTVUrVgpVdy9MS1NUNlZQZW5mUUtDQVFFQXdxR01BVVRLRjZpQzd3MXRURktwaGVhUE16VmZvVDlMYURTWXkxck5zY3MyCkVFWm5RWjJtOS9zOCs0Smo5b09hcTFRZWsxK2hjUWdWVHF4Q3pZQWxLOUt2L1hocCs4MDdDMFVIbGIzUHhRT0oKWUcycStUYVVVU092OWZ6Uzh0dExrK3B3UnFCS3JyV3B3cmlFZW4vTXcrdDhWenJnZms4YTJCYkh3VkV2WFZRawpremFSZkY5OHBRaDNqY2krSk1EVXdZYThpNjR3Um9XRGpvR3BFSE5jak5Dem1FdDdXcEQ3VUNkNVZLelF2bXZQCjEzR3BhWmFkWnIyT3Rzd1g0bXlGWmEwVHcwQ0FsL1NRdTFsUE0yODdsTUFudHZCRTFPeStjYlo0MmpwdUhPM08KSXB2OHFrVG1jOThmQnphNnEvQmp2WGV3ZlFuZjdtd05WbThpKzBJSm13S0NBUUFTL2wrK0FaUG00bE1oTFZ5RQppK08rZVI5aTNVd2EwMjBROEp6c0VGNmNycms0elM2dlZPT2FBcGVobEtSbGxwa2JTazkrNXdCbEVhMjZrKzArCm02emVzcjRDdjBWOU84dFlURW9ZVXJ1ejhyMjFHWXRUakVTd2dOV1hibG9HcG9rMURBMWVQcjhueU9pT0pTVHkKQjNXOHFaeWh5K3pYeHRTKzh5bGVhM2xvc1AyTXY3NXYyajV6SFM0dVl2RWNmck42V0Q1a3dLN2pIQUorTksveApQRncxNS9oRU02N2QwSTFGSGlyZm9MMkVlcUV6RlhjQml5UkxHKzkyTkVQZ0doaFRPdGJQbFBuT1h5eHlTdkQ5ClhUVjlveFJEVDdyUDlwYXBiOTRDdTVUS0VacTJpK0xpbldPOEN2SVlld0djNThmYXRxUCtVVEJJUXd4MTBjcncKSXRDUkFvSUJBQU1pMXo2dC9ST2tnM2VXbjh3N0NNQS9sczhjYlE0TUZ3cjJ6Zjk0MXhlbVRwaTBpYlZrOU92SwpBSkdNNkU5d2oyMXpUWXJTWDZlU21jVkt3VWpPWjhycytpajdaN25HOU15WnNDV1ppVitEVHhOZXNRS1MvcERRCkltVzBUVEhjbHJzcmErTzNjWHlmTUwwU2ZBLzlQeTlvKy9mcjJ2SXVGQ0NuUFZEQUhpTkMxOVFIYlJDeitTNHYKbEwyVUhudzVIelIvRjBxbzQ5NC9DSCtqVnpZTXBkRWZDOFhJY1pSa0FhaW8raXVESFZuMElzVTE3NlRqNkdWZgphSTFKZkprSlpwemN6UlM0VlZvZGRyZU9HTmliVWpwelhqQjBicWQvcVJIci9zYUZhb0RNMUNWNm5mZWdaSlk1CllpYWJteVpxR1RGVVhHT25aUlJTYVdTYkpkVW1tMEVDZ2dFQU9CVnlOaWhvU3pWMkFXV0F2c0s0eDhwMU1pcUUKNGo5cVhHTmhUZFl4bVNVbUpNTzhMbHBKRkRLL01zS2lVT2FvU0pieGxveVFNUTBVZDk3WENnTUZkUnB6cGdRMQpmMHk2TjhpeFdKUSsvRDkxaGwyUGgzZlFQRUgzZXZHeXBDOXRDaGd4bXFlNm5vM21WdlhPdGpSSk5haWMvcktSCmNjajJaMDRHMjFOMjlsT0diYkNHQ3B5ZjhPZzBNelNjaWtNUjZDT0o3dmhuUTFmSlM3M29UVEZCSFUxOHAyOXgKQ055NDJsRUxNdTdOeCt3czZtV1NTV01XV05GRmdQQnFUbWZMcmZXa002eUZuVm5vUW15TWE1ZXF5aFFFVlMyeQp0ZUdFbCtCQXVvQmhTRk1pcGpBK1o2c0QzZi9mbnRlblpwdE8wOXZURXB1ZWpPSjFXZGQ3Snl2aHlRPT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
    },
    "firstConsecutiveStaticIP": {
      "defaultValue": "10.240.255.5",
      "metadata": {
        "description": "Sets the static IP of the first master"
      },
      "type": "string"
        
    },
    "kubeConfigCertificate": {
      "metadata": {
        "description": "The base 64 certificate used by cli to communicate with the master"
      },
      "type": "string",
      "defaultValue": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUzakNDQXNhZ0F3SUJBZ0lSQVAzTkRxWll1UzVUK1JuVDJYdnhlV0V3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTVRZeE1USXdNVEV5TmpNMldoY05NVGd4TVRJd01URXlOak0yV2pBUgpNUTh3RFFZRFZRUURFd1pqYkdsbGJuUXdnZ0lpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDCkFRQ1ZieTA2NUJUR09tTlptZG51YWtvQ2FPNGRoMmJqTnlvQ01sdnFpZlRIaUNuTnhkMEFBR1FQT0FtdWQzRlEKM3RUamVoNzVkTWRPY3I4YUYwZWRNSUt3QkRyNGt1bWQ2dEF6dmpRbkppMVJWK1pKYWhTczY1eitZU2toakpNSgpLZTFOOVc3SnJUMlgvc1NlZG95cG5ZY1JoMGFoVkpKcjU0MTY4bjZsTksxdjNCK2VpT3FGMi9vQ1VYQzdXVjR3CmFnME56cGtwWXBuNGpMOGhSK3V6M2MyRmp6bWJScTJLQzdadjlYelFQNDA1V1NqVEdVSDV3VmpqQm53SWVZRE0KZnNreHdxRFFTZGltYXZ1LzJnd3Z3RlI5YU44YVJ6VU5KQU1wTXFMNnAyNkxxeVYzOWxxbk0vWk9JOHNUSnBiQwo5RU01V1B6aDhVTjY0TUNQS3dBd1N2bjhPN3ROeU1qbUZjWnVJUmpTbSsvQ1dCMk1wTEQ5MjI5dnFtUzV1bW5wClBYVENBWHV5bHMzOGxVVlV0QmRYcjN3UENJTHdKMDh5Z2dlbTRLaG5lK1F4eSthdytoN1NRODltN0ZzSWNGa1IKNVo1NXBRdlNKWDFMc1lWdHFSZkNGSmZoMENCSENtNWtLcWNLbXUzZVVOdW5DdWZXNjZWUVVObFEySHVrb3Bpego1T091dmtYSlh1OGxPYWxXbU5DcEwwQkRaYkxDTy9MS3hFZkFMZlpvWWVUSE1vRmFFdVNyRUhaeGZPN1BvRUZBCmtaY2JxcFlKQTl6b0NZaU5QUy9oTVVoaDlidDY0d1NzQkpHcnlVWjk4dm1CZlBZZ3ZiUTgzT0FNNkRab2NmM2YKdC9tTjluMkc4R1RxSkp6VkFDYnplOFlIRHRQSHNIVEhkZVBiNTJHTnJaTWdKd0lEQVFBQm96VXdNekFPQmdOVgpIUThCQWY4RUJBTUNCYUF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQVhLd0MvWDEvOFdGRnBCbFg1anNWVnl3alpUK0dDT1JkTTRZeElqay8KaUx5bmwwR3hEYTE5bzcvLy9pMmFIYTNjb2hvdms0YTJIV3hRYjM1Yk9rWGs5Z2lSNDN1ME5CZ2doWVoxLzFYbgozdlNVelQrZTY3VFd3RG1hV3laMWsveW9PUFRxS2NkVHNWazY1T0hyWUNwRFhYZXF6S21sY0djMlhSdnZhTjFDCmRJYjZRN1dsUnhUZmNjRzdudUVqenQ3ZUd4dEtZeXQyYjgxMVVLTUNpUFAzMVQyN2YrYjY1M2MyTUwveXlydUsKczhZaGZnS3lIdy9EZGFXdnErcGREem5SdnNZd2xaNHBYM1dGWjJCZnRlb3JISlVWZysvRTFIMjg2aGRLTFkvYwp2bVpDb1gyQzVxZ0FPNkNmdGNVay9HbldWUjRFK3NleU5kUXBJMklDd1VTcldHQ0NJL3Nxd0lWaTlwYWRqUGFtCkJia2t1Sk1tYXJXZkltRGNZbURSV1pzc3dUNzgya3VpbVpON0dOdFJwZk8rcE9NZUpSRkIrNTJpV1BVOVJwTGEKOHp5bEpmOFVCd0dJUHh6YlFBRWFOUnZlTnV2a3Bhb2M1K2JNRXlxS2NGVlZ0Qys3YlkvMVRqNmVXWHRESWN6VApCQkNOajNBUkpzNDQ0dlhJdHVHZ3hRV0lYZzd6bzBHR0JEUFMyL1ExWC8xWXh2U21ZM0dKL1pZclNlMHhZQSsyCngzZ3lnVE41VjllNmZWWmFzdjMyOGVPZmg2cytyNHBzcG5uNStRYjR5UlBUSU43Z056YmtqQmJIb3dUL3FqZlEKOUZjdWhMN0ZVeVFOMmhocFpmc25ncy9BT3R1VE01Yk5vYy9hYWY1ejJ2YTRTV2ZuWnBmUVNpTVNOSENlOXJ2bQpiS0U9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
    },
    "kubeConfigPrivateKey": {
      "metadata": {
        "description": "The base 64 private key used by cli to communicate with the master"

      },
      "type": "securestring",
      "defaultValue": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBbFc4dE91UVV4anBqV1puWjdtcEtBbWp1SFlkbTR6Y3FBakpiNm9uMHg0Z3B6Y1hkCkFBQmtEemdKcm5keFVON1U0M29lK1hUSFRuSy9HaGRIblRDQ3NBUTYrSkxwbmVyUU03NDBKeVl0VVZmbVNXb1UKck91Yy9tRXBJWXlUQ1NudFRmVnV5YTA5bC83RW5uYU1xWjJIRVlkR29WU1NhK2VOZXZKK3BUU3RiOXdmbm9qcQpoZHY2QWxGd3UxbGVNR29ORGM2WktXS1orSXkvSVVmcnM5M05oWTg1bTBhdGlndTJiL1Y4MEQrTk9Wa28weGxCCitjRlk0d1o4Q0htQXpIN0pNY0tnMEVuWXBtcjd2OW9NTDhCVWZXamZHa2MxRFNRREtUS2krcWR1aTZzbGQvWmEKcHpQMlRpUExFeWFXd3ZSRE9Wajg0ZkZEZXVEQWp5c0FNRXI1L0R1N1Rjakk1aFhHYmlFWTBwdnZ3bGdkaktTdwovZHR2YjZwa3VicHA2VDEwd2dGN3NwYk4vSlZGVkxRWFY2OThEd2lDOENkUE1vSUhwdUNvWjN2a01jdm1zUG9lCjBrUFBadXhiQ0hCWkVlV2VlYVVMMGlWOVM3R0ZiYWtYd2hTWDRkQWdSd3B1WkNxbkNwcnQzbERicHdybjF1dWwKVUZEWlVOaDdwS0tZcytUanJyNUZ5Vjd2SlRtcFZwalFxUzlBUTJXeXdqdnl5c1JId0MzMmFHSGt4ektCV2hMawpxeEIyY1h6dXo2QkJRSkdYRzZxV0NRUGM2QW1JalQwdjRURklZZlc3ZXVNRXJBU1JxOGxHZmZMNWdYejJJTDIwClBOemdET2cyYUhIOTM3ZjVqZlo5aHZCazZpU2MxUUFtODN2R0J3N1R4N0IweDNYajIrZGhqYTJUSUNjQ0F3RUEKQVFLQ0FnQVcwQnN5azJGTWhkdG04V0xnejk4dWtRQlJCN3ZBVWtxYWZUK2xCWnlWM1lhc1FGbWx4MmwvSFVuMQpGWXo2RUpxbGc1NDQ3UWdFUk9aQndHNFJaRGQvVVpZREhzS0ZkalNFd2JQS2lqeCszNUZyZ2NOWVJydjM1Yk5XCnlOUWxvUDMyV2RLby9VYWE3cXpybUNPUFBWcENaY2wxbGFpb3luZkIza1ZSU1VKMUFrRGRmZjkzb2daLzFoa0UKc1BiOUl5T05DUTQrMEN1N1V4bFdwbGtvWTJNZDBhaTB1TXlEZDVoSmJVdTVxd29QU0RwQVIrblhqQm5heHNHbQp0WTNoS2pYaTM5aVhFNzc4WVBhLzZqVFVFV09VcGE3eG53OU5TME1rUmZPMW1sdjQvSTdDeXB3NlRHZDh0R0FyCk0wZnV5VVY5K3NUWVpYR3N6NlQxOWxXWUNjb3g2T0FMalVHWG5OaEg5cFNyVHhkYm8vcmFBdERYM0k0amdibnEKeHdlMXpWSFZ1TStzNm9WYnBJYnhkYjFERVpXNThmdldZT2ZZQTkwZlhmUXAyMXUxNjZtQ2tzMlVOcysrWDI3bwpCNm0vRDROeXVnRHp0TEMyNDdaM1BZV3RWdUhMUlJROVZsVU1Ecld0OThPTVlrcmsxUStESjRyTUdyK0VDM2s5CkxqMUcyZDgrS2hqSjJWdlMrcW9JSTRPZ1loOUJscU5lbFRud2dRdFpBTGVtY2ZzZVRBYllHUk1tZ003SkFZSWEKOGpST2hGWjRMVHBKQVlaZjAvTm81VTJRWm0rK2JESTdoRWFnMkY0Q1pRQ1BwWElHV3RqWjR2czBHZlJ1U0ZSOQpCdXkxbFV2RFdyWkJmR1BhSGNxamlLakYxaW82YXo4eVNDWnFmdi90ODYxNkE0dmQ4UUtDQVFFQXhRMlBXby9PCjhuYmVUdmgvTEFpblpvTzVjSE9UczErNEt4VGZ4TzVLSkRMM2lrZHZ3NndhZXU1MWJiM1pPNG1vdEMreDE1Z00KTWNveHJjU2hYTm5rOVQvaGd5SFA3WmZwczFGSHNTWE55c1ZJcDA4UTFLRHBUeG9ha0RCWFRCTzlSWmJJTG5WVApQcXBxbTVrVTBvTFdqaGlPVVlXVUthajgrRDFXTXIvdTE5ZGNzeFZVMGx4UmxraVM0bGJDcjNvMlF5d2pXYjRlClVnZjFybFJIWThxRndmYzBldXY0U3Y0K0M3OE90dy82dlNwaHlvVDZRVFhtb2piZ1AzMWkzYjFQOE5pTDBSUzEKSWh2WkNlNHEyajdCSzdMRjdleWg1L2JHc1pCMldZMkJQRjY5RDhNdTVKSGpYck1CUFMvN1RHZ1VkYlVKdDgrSwpRd3BFYlFKQk1IVFBLUUtDQVFFQXdpTHlyQU11ZGxnUHlUU3JxdjM4c09kaFRGOVRjMUE0ZGRWMGRMQ2tlS0U2CjU2WlY5WDBzbHhackYyZDRNQjdVeFcwYVVSZHBKNXFqK0dKQm5ncGxOcXRiNFI3Q0dsZ0Jlb0kwcEhFWGYrNHgKUEVmYXlNY0JFTHhjU0l5cHNCcENUV1Z1dVlYUHRNMU1Ba0t4Y2hWamtHQUdZWWE3aG1pUzJLbU5IUUpmU1c1NAoyYzZqQXYvZTZOOWdBdFdiaVBmNnR2dmhrdi8vRitlUXEza2J3YlBNSGxtVVFxaEozV2xxa3piMUlHQ3EyMithCnNUUmpPb1RKVHVDUEFwa2s1aWQ5RTlhVkpNUU51KzM4b2lheHhPTjl2aWd3SEdLdjd5UDNHcHhLU0xRQ054bFQKLzNzUHpBYmFhZndkSE1zbXgrcVBXOWs3MDJ4KzVWeHJteU4xVEx4dXp3S0NBUUJhb0ZMbTVxN1o2bnR4dkczWQpsWjVQMHBNdHVhb2JYQkY2bHQ0WFZ6UjRFNHl2WncxcTQ3TkdDSGV2WWhvUGZNOC9GNVJtUUVLVGY1ZDdnS3hwCjVMaWRacVRUeDNBMnFLQk4zVHJvcVNkTmM1Qm5pa0NHV2Y4VFowRUNRWWxVcnR0a3J1VWdJTXVKVFowOE5KcFQKK3VLc2RYUzIzNFYxNTRkNHI5VCtBREhieU91VVhXSW1ZVmtRa2c0ajFKMHpVVFMxamc0d0R2VW82d28rQS9yVgpWV1pRLzkxK0R4cWhldTZVUG1tSkhldEdwc0JWQVBXTG1qdVpMVDNUVlZwcitzNVNTWFY4VWxhLytpakduV2ZOCitnQ2psVlBjaWZFb211Rms5cmpIbFFIei91cGEzbnlwbU1NR1liTlhMY01ZcitHQkJTTVVDM3BlUE5HZGhPVHcKWVRpSkFvSUJBQXdFajlNNEt6TW1SbXZsTjg5UkE4aUx1a2s1Q1hoMCtkbkppZmtEU2xzeFYrMHBMZDhSamFZWQp2QzVwdUZYNlFwK3FIbHZ3d0JDMGtQdjZVU2VRYXkyVU5BN2VrWk9CNlMyRlMrNzJGVWRWSG5VbDJaUmVSV0djCjEzV2lSNHJnUlVSM1NBQnlHU2FQSXVwczZJRXdjOFpuTzEza01rMml3WnhwK3BOV0owSHJkYzI5N2Zkc2tZY0cKOVBHWCtaWGtEQUF4M1lmMUV2eU8yRFRWUFhPalJycUdQeGhWUktWUk5rakF1VEgwNmY3RmpPVDFZa01vSHpJagowcGFObG13cys2QXp3MjNRT1MxdUVScVVuS0tjbHBjajg3NStHWGdMV091cnl5bHZBMGdYNkV4RGVQbmZYcnY2CjRHNTg0UHkxTjRTdkVQWUluRjVrZDBEV1ZCZVkvcDhDZ2dFQkFLMlpWWGd2dHFDTE8wOVQvUEp2YThBTmdWNGUKK0NqUVVxQXcxNWRpNmdkOUpsbG0xMGY4MGJIMTFseVVKQzdCYnZ0WjlDZG1sdGVCWEF5MXc1OHN1MEZyOG50VgpsOXNHYVRLaUFCazk0TWRGOG95ZVd3SFVxL20vcTVTRGVnZkROdjhIcXI2TXR2TEY5bXhpdDl6SllqWnRwWmtUCjVyN3haQ0dPc2JYSWpCRS9qY3dUWEVUV2JMbGh5UmQ4Z1dxTTlqdkthaEdoeGN1ZDJnYWJaaS90a1VpUDNPLzkKY3hUKzRsdU9ZaE43Qm4rNkNybk1ZVk9NTzBTcXBXR3JDVzA2R3NyeHdhZFlYNDFJQncyTjhyK2JndHEyYldJVgpoenVoMGlsMFE3M1cwQUVmM3FOZDM3UWV4aHFLUko2aVFENkxMQ0prK0hua3JWd2JjcWxaRjNWSkU3az0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
    },
    "kubectlVersion": {
      "defaultValue": "v1.4.5",
      "metadata": {
        "description": "The kubernetes version."
      },
      "type": "string"
    },
    "kubernetesHyperkubeSpec": {
      "defaultValue": "gcr.io/google_containers/hyperkube-amd64:v1.4.5",
      "metadata": {
        "description": "The container spec for hyperkube."
      },
      "type": "string"
    },
    "linuxAdminUsername": {
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string",
        "defaultValue": "dinor"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string",
        "defaultValue": "dinacsengine"
    },
    "masterSubnet": {
      "defaultValue": "10.240.0.0/16",
      "metadata": {
        "description": "Sets the subnet of the master node(s)."
      },
      "type": "string"
    },
    "masterVMSize": {
      "allowedValues": [
        "Basic_A3",
        "Basic_A4",
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_DS13",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS5_v2",
        "Standard_F16",
        "Standard_F8",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_NC12",
        "Standard_NC24",
        "Standard_NC6",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string",
      "defaultValue": "Standard_A10"
    },
    "nameSuffix": {
      "defaultValue": "12959967",
      "metadata": {
        "description": "A string hash of the master DNS name to uniquely identify the cluster."
      },
      "type": "string"
    },
    "servicePrincipalClientId": {
      "metadata": {
        "description": "Client ID (used by cloudprovider)"
      },
      "type": "securestring",
      "defaultValue":"*************"
      
    },
    "servicePrincipalClientSecret": {
      "metadata": {
        "description": "The Service Principal Client Secret."
      },
      "type": "securestring",
      "defaultValue": "********"
    },
    "sshRSAPublicKey": {
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string",
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCz7gkqOUUUlCObjgevthzsfFEUGPxm/8+tQYqDXQ/Z0aCOB25cvSHepTWPb0fFJ8fCqp/+9mxJg8tR6XY7nliZ8ioH3j3yBphgzPAkPmoX1fEe05TPm3RQQiQiljZPiKhnxnDI9kCyPI/Fp7cmhklEDFN9aMy/0/3Jx87pIktS0KPC9U/WMrtmNr/0LeKva/0+NgvJkm3mcqAFBH3pBVsnVQrGObp7cHXVXZAas6mjhqsTLjs52T1OQkRtilZsjV9kjvD5qU9tfKRVFBLZGIsVZsCGN4+i3R0UfrCRG6EYqezLZMMf5B5jCugD68kEVPSbsccMVijPDbLWmqIlLX45 dinorgeler@dinors-mbp.guest.corp.microsoft.com"

    }
  },
  "variables": {
    "agentpool1AccountName": "[concat(variables('storageAccountBaseName'), 'agnt0')]",
    "agentpool1AvailabilitySet": "[concat('agentpool1-availabilitySet-', variables('nameSuffix'))]",
    "agentpool1Count": "[parameters('agentpool1Count')]",
    "agentpool1Index": 0,
    "agentpool1StorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),variables('agentpool1Index'))]",
    "agentpool1StorageAccountsCount": "[add(div(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')), mod(add(mod(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')),2), add(mod(variables('agentpool1Count'), variables('maxVMsPerStorageAccount')),1)))]",
    "agentpool1SubnetName": "[variables('subnetName')]",
    "agentpool1VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpool1-', variables('nameSuffix'), '-')]",
    "agentpool1VMSize": "[parameters('agentpool1VMSize')]",
    "agentpool1VnetSubnetID": "[variables('vnetSubnetID')]",
    "apiServerCertificate": "[parameters('apiServerCertificate')]",
    "apiServerPrivateKey": "[parameters('apiServerPrivateKey')]",
    "apiVersionDefault": "2016-03-30",
    "apiVersionStorage": "2015-06-15",
    "caCertificate": "[parameters('caCertificate')]",
    "clientCertificate": "[parameters('clientCertificate')]",
    "clientPrivateKey": "[parameters('clientPrivateKey')]",
    "kubeConfigCertificate": "[parameters('kubeConfigCertificate')]",
    "kubeConfigPrivateKey": "[parameters('kubeConfigPrivateKey')]",
    "kubeDnsServiceIp": "10.0.0.10",
    "kubeServiceCidr": "10.0.0.0/16",
    "kubectlVersion": "[parameters('kubectlVersion')]",
    "kubernetesHyperkubeSpec": "[parameters('kubernetesHyperkubeSpec')]",
    "location": "[resourceGroup().location]",
    "masterAvailabilitySet": "master-availabilityset",
    "masterCount": 1,
    "masterFirstAddrComment": "these MasterFirstAddrComment are used to place multiple masters consecutively in the address space",
    "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
    "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
    "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
    "masterFqdnPrefix": "[parameters('masterEndpointDNSNamePrefix')]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterPrivateIp": "[parameters('firstConsecutiveStaticIP')]",
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterFqdnPrefix'), '-', variables('nameSuffix'))]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), 'mstr0')]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMSize": "[parameters('masterVMSize')]",
    "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
    "maxVMsPerPool": 100,
    "maxVMsPerStorageAccount": 20,
    "nameSuffix": "[parameters('nameSuffix')]",
    "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
    "nsgName": "[concat(variables('masterVMNamePrefix'), 'nsg')]",
    "orchestratorName": "k8s",
    "osImageOffer": "UbuntuServer",
    "osImagePublisher": "Canonical",
    "osImageSKU": "16.04.0-LTS",
    "osImageVersion": "16.04.201606270",
    "primaryAvailablitySetName": "[concat('agentpool1-availabilitySet-',variables('nameSuffix'))]",
    "resourceGroup": "[resourceGroup().name]",
    "routeTableID": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
    "routeTableName": "[concat(variables('masterVMNamePrefix'),'routetable')]",
    "servicePrincipalClientId": "[parameters('servicePrincipalClientId')]",
    "servicePrincipalClientSecret": "[parameters('servicePrincipalClientSecret')]",
    "sshKeyPath": "[concat('/home/',variables('username'),'/.ssh/authorized_keys')]",
    "sshNatPorts": [
      22,
      2201,
      2202,
      2203,
      2204
    ],
    "sshPublicKeyData": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "[uniqueString(concat(variables('masterFqdnPrefix'),resourceGroup().location))]",
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "subnet": "[parameters('masterSubnet')]",
    "subnetName": "[concat(variables('orchestratorName'), '-subnet')]",
    "subscriptionId": "[subscription().subscriptionId]",
    "tenantId": "[subscription().tenantId]",
    "username": "[parameters('linuxAdminUsername')]",
    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vmSizesMap": {
      "Basic_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Basic_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A10": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A9": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS15_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS5_v2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_F16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F16s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F2s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F4s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_F8s": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_H16": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16mr": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H16r": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_H8m": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NC6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV24": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_NV6": {
        "storageAccountType": "Standard_LRS"
      }
    },
    "vmsPerStorageAccount": 20,
    "vnetCidr": "10.0.0.0/8",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "vnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('agentpool1Count')]",
        "name": "loop"
      },
      "dependsOn": [
        "[variables('vnetID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), 'nic-', copyIndex())]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('agentpool1VnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentpool1StorageAccountsCount')]",
        "name": "loop"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(add(copyIndex(),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(copyIndex(),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName'))]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentpool1VMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpool1AvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('agentpool1Count')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('agentpool1VMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('agentpool1AvailabilitySet'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex())]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentpool1AvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('agentpool1VMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentpool1VMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('username')]",
          "computername": "[concat(variables('agentpool1VMNamePrefix'), copyIndex())]",
          "customData": "[base64(concat('#cloud-config\n\n# { { { variable } } }\n\nruncmd:\n- /usr/bin/curl -sSL --retry 12 --retry-delay 10 https://get.docker.com/ > /tmp/install-docker\n- /bin/bash -c \"/bin/bash /tmp/install-docker\"\n\nwrite_files:\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/overlay.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/apiserver.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('apiserverCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('masterPrivateIp'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/systemd/system/kubelet.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=Kubelet\n    Requires=docker.service\n    After=docker.service\n\n    [Service]\n    Restart=always\n    ExecStartPre=/bin/mkdir -p /var/lib/kubelet\n    ExecStartPre=/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n    ExecStartPre=/bin/mount --make-shared /var/lib/kubelet\n    ExecStart=/usr/bin/docker run \\\n      --net=host \\\n      --pid=host \\\n      --privileged \\\n      --volume=/dev:/dev \\\n      --volume=/sys:/sys:ro \\\n      --volume=/var/run:/var/run:rw \\\n      --volume=/var/lib/docker/:/var/lib/docker:rw \\\n      --volume=/var/lib/kubelet/:/var/lib/kubelet:shared \\\n      --volume=/var/log:/var/log:rw \\\n      --volume=/etc/kubernetes/:/etc/kubernetes/:ro \\\n      --volume=/srv/kubernetes/:/srv/kubernetes/:ro \\\n        ',variables('kubernetesHyperkubeSpec'),' \\\n          /hyperkube kubelet \\\n            --api-servers=\"https://',variables('masterPrivateIp'),':443\" \\\n            --kubeconfig=/var/lib/kubelet/kubeconfig \\\n            --address=0.0.0.0 \\\n            --allow-privileged=true \\\n            --enable-server \\\n            --enable-debugging-handlers \\\n            --config=/etc/kubernetes/manifests \\\n            --cluster-dns=',variables('kubeDnsServiceIP'),' \\\n            --cluster-domain=cluster.local \\\n            --cloud-provider=azure \\\n            --cloud-config=/etc/kubernetes/azure.json \\\n            --hairpin-mode=promiscuous-bridge \\\n            --network-plugin=kubenet \\\n            --reconcile-cidr \\\n            --v=2\n    ExecStop=/usr/bin/docker stop -t 2 kubelet\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    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\n'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[parameters('sshRSAPublicKey')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('storageAccountPrefixes')[mod(add(div(copyIndex(),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(div(copyIndex(),variables('maxVMsPerStorageAccount')),variables('agentpool1StorageAccountOffset')),variables('storageAccountPrefixesCount'))],variables('agentpool1AccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk/', variables('agentpool1VMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('agentpool1VMNamePrefix'), copyIndex())]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('agentpool1Count')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('agentpool1VMNamePrefix'), copyIndex())]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(),'/cse', copyIndex())]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh ',variables('tenantID'),' ',variables('subscriptionId'),' ',variables('resourceGroup'),' ',variables('location'),' ',variables('subnetName'),' ',variables('nsgName'),' ',variables('virtualNetworkName'),' ',variables('routeTableName'),' ',variables('primaryAvailablitySetName'),' ',variables('servicePrincipalClientId'),' ',variables('servicePrincipalClientSecret'),' ',variables('clientPrivateKey'),' >> /var/log/azure/cluster-provision.log 2>&1 &\" &')]"
        },
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {},
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterAvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterStorageAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]",
        "[concat('Microsoft.Network/routeTables/', variables('routeTableName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('virtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetCidr')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnet')]",
              "networkSecurityGroup": {
                "id": "[variables('nsgID')]"
              },
              "routeTable": {
                "id": "[variables('routeTableID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('nsgName')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow_ssh",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22-22",
              "direction": "Inbound",
              "priority": 101,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow_kube_tls",
            "properties": {
              "access": "Allow",
              "description": "Allow kube-apiserver (tls) traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443-443",
              "direction": "Inbound",
              "priority": 100,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('routeTableName')]",
      "type": "Microsoft.Network/routeTables"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRuleHTTPS",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('masterLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('masterLbID'),'/probes/tcpHTTPSProbe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterFqdnPrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "masterLbLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[variables('sshNatPorts')[copyIndex()]]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "nicLoopNode"
      },
      "dependsOn": [
        "[variables('vnetID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]",
        "[variables('nsgID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                }
              ],
              "privateIPAddress": "[concat(variables('masterFirstAddrPrefix'), copyIndex(int(variables('masterFirstAddrOctet4'))))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('vnetSubnetID')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'),'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('username')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "customData": "[base64(concatcloud-config\n\n# { { { variable } } }\n\npackages:\n - etcd\n - jq\n - traceroute\n\nruncmd:\n- /bin/bash -c \"/bin/echo DAEMON_ARGS=--advertise-client-urls \"\"http://127.0.0.1:2379,http://',variables('masterPrivateIp'),':2379\"\" --listen-client-urls \"\"http://0.0.0.0:2379,http://0.0.0.0:4001\"\" | tee -a /etc/default/etcd\"\n- /usr/bin/curl -sSL --retry 12 --retry-delay 10 https://get.docker.com/ > /tmp/install-docker\n- /bin/bash -c \"/bin/bash /tmp/install-docker\"\n- /usr/bin/curl -sSL --retry 12 --retry-delay 10 https://storage.googleapis.com/kubernetes-release/release/',variables('kubectlVersion'),'/bin/linux/amd64/kubectl > /usr/local/bin/kubectl\n- chmod +x /usr/local/bin/kubectl\n\nwrite_files:\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/overlay.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/apiserver.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('apiServerCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('masterPrivateIp'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: /etc/kubernetes/manifests/kube-apiserver.yaml\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n      apiVersion: \"v1\"\n      kind: \"Pod\"\n      metadata:\n        name: \"kube-apiserver\"\n        namespace: \"kube-system\"\n        labels:\n          tier: control-plane\n          component: kube-apiserver\n      spec:\n        hostNetwork: true\n        containers:\n          - name: \"kube-apiserver\"\n            image: \"',variables('kubernetesHyperkubeSpec'),'\"\n            command: \n              - \"/hyperkube\"\n              - \"apiserver\"\n              - \"--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota\"\n              - \"--address=0.0.0.0\"\n              - \"--allow-privileged\"\n              - \"--insecure-port=8080\"\n              - \"--secure-port=443\"\n              - \"--cloud-provider=azure\"\n              - \"--cloud-config=/etc/kubernetes/azure.json\"\n              - \"--service-cluster-ip-range=',variables('kubeServiceCidr'),'\"\n              - \"--etcd-servers=http://127.0.0.1:4001\"\n              - \"--tls-cert-file=/etc/kubernetes/certs/apiserver.crt\"\n              - \"--tls-private-key-file=/etc/kubernetes/certs/apiserver.key\"\n              - \"--client-ca-file=/etc/kubernetes/certs/ca.crt\"\n              - \"--service-account-key-file=/etc/kubernetes/certs/apiserver.key\"\n              - \"--v=4\"\n            volumeMounts:\n              - name: \"etc-kubernetes\"\n                mountPath: \"/etc/kubernetes\"\n              - name: \"var-lib-kubelet\"\n                mountPath: \"/var/lib/kubelet\"\n        volumes:\n          - name: \"etc-kubernetes\"\n            hostPath:\n              path: \"/etc/kubernetes\"\n          - name: \"var-lib-kubelet\"\n            hostPath:\n              path: \"/var/lib/kubelet\"\n\n- path: /etc/kubernetes/manifests/kube-controller-manager.yaml\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n      apiVersion: \"v1\"\n      kind: \"Pod\"\n      metadata:\n        name: \"kube-controller-manager\"\n        namespace: \"kube-system\"\n        labels:\n          tier: control-plane\n          component: kube-controller-manager\n      spec:\n        hostNetwork: true\n        containers:\n          - name: \"kube-controller-manager\"\n            image: \"',variables('kubernetesHyperkubeSpec'),'\"\n            command: \n              - \"/hyperkube\"\n              - \"controller-manager\"\n              - \"--master=127.0.0.1:8080\"\n              - \"--kubeconfig=/var/lib/kubelet/kubeconfig\"\n              - \"--allocate-node-cidrs=true\"\n              - \"--cluster-cidr=10.244.0.0/16\"\n              - \"--cluster-name=',variables('masterFqdnPrefix'),'\"\n              - \"--cloud-provider=azure\"\n              - \"--cloud-config=/etc/kubernetes/azure.json\"\n              - \"--root-ca-file=/etc/kubernetes/certs/ca.crt\"\n              - \"--service-account-private-key-file=/etc/kubernetes/certs/apiserver.key\"\n              - \"--v=2\"\n            volumeMounts: \n              - name: \"etc-kubernetes\"\n                mountPath: \"/etc/kubernetes\"\n              - name: \"var-lib-kubelet\"\n                mountPath: \"/var/lib/kubelet\"\n        volumes:\n          - name: \"etc-kubernetes\"\n            hostPath:\n              path: \"/etc/kubernetes\"\n          - name: \"var-lib-kubelet\"\n            hostPath:\n              path: \"/var/lib/kubelet\"\n\n- path: /etc/kubernetes/manifests/kube-scheduler.yaml\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n      apiVersion: \"v1\"\n      kind: \"Pod\"\n      metadata:\n        name: \"kube-scheduler\"\n        namespace: \"kube-system\"\n        labels:\n          tier: control-plane\n          component: kube-scheduler\n      spec:\n        hostNetwork: true\n        containers:\n          - name: \"kube-scheduler\"\n            image: \"',variables('kubernetesHyperkubeSpec'),'\"\n            command:\n              - \"/hyperkube\"\n              - \"scheduler\"\n              - \"--master=127.0.0.1:8080\"\n              - \"--kubeconfig=/var/lib/kubelet/kubeconfig\"\n              - \"--v=2\"\n            volumeMounts:\n              - name: \"etc-kubernetes\"\n                mountPath: \"/etc/kubernetes\"\n              - name: \"var-lib-kubelet\"\n                mountPath: \"/var/lib/kubelet\"\n        volumes:\n          - name: \"etc-kubernetes\"\n            hostPath:\n              path: \"/etc/kubernetes\"\n          - name: \"var-lib-kubelet\"\n            hostPath:\n              path: \"/var/lib/kubelet\"\n\n- path: /etc/kubernetes/manifests/kube-addon-manager.yml\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: kube-addon-manager\n      namespace: kube-system\n      version: v1\n    spec:\n      hostNetwork: true\n      containers:\n      - name: kube-addon-manager\n        # TODO: consider if hardcoding this is the right thing to do...\n        image: gcr.io/google_containers/kube-addon-manager-amd64:v5.1\n        resources:\n          requests:\n            cpu: 5m\n            memory: 50Mi\n        volumeMounts:\n        - name: addons\n          mountPath: \"/etc/kubernetes/addons\"\n          readOnly: true\n      volumes:\n      - name: addons\n        hostPath:\n          path: \"/etc/kubernetes/addons\"\n\n- path: /etc/kubernetes/addons/kube-dns-service.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/3xQwUoDMRC95yuG3lO7iCBztRcRpFD1ns2+Q9hsEjKTgn8vcbugoCWXvDfvvXmMK+EDVUJOTJfBzCFNTGfUS/AwC9RNTh0bouhGROk/ovlRrCuFaW4j7JRkZduImqCQfch3PjZRVCtrFtNOa8PuD2VyC5he2ojj69kQrfhHdCekOL+x8imKxUiB732um55PTMNh399wMEQlV/3ua6+JW88+YHq4X0HNmn2OTO/H02+xVV9uGd6eukEQ4TXX/y7zFQAA//8ZlC5KYQEAAA==\n\n- path: /etc/kubernetes/addons/kube-dns-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/8xUXW/rRBB9z68YmVfsOC29LSsFCbUIXhARFF4IQtv1NF51vbPdWUc3F/Hf0TqJvfFNLkmF0M1TtPN1fM7MkU7/hp41WQHr2eRF20rAz+iMVjJosvdkgydj0E8aDLKSQYoJgJFPaDj+A3hpn9BbDMiFpqkyLQf0OaNfa4UCsuBbzLaZd5xL50RXkleWu9f1MP/rCYCVDQ4Z+fDITqp9hDccsJmwQxVB+C1gFnA1AWA0qAJ5cf7QgI0zMuC2JP3S+JPWUujo4P0TAKsaq9agL6RxtSxGNHgdtJImd1QJyLIzywIZ9LtJkP3+1zJ7wc0yE8vsftfw26oiyz9Zs1lmXy4zcjGffJfz3XvNgZfZ33/s56U6nSbjMhWP0AewVyL+FNkgtUXfD85B+lUCI4cszytqpLbz3ajCkJKmyEY5lnNHPsxnZXlzPQR1I1coYKV8RLsiWhn8c5g7jV8Ta2VTvftKzIrbvtLoNVpkXnh6wgERwLPUpvX4WHvkmkwl4CaJ1iG47zGkBQBOhlpANq1RmlB/yHdTs8Mk8kHAXXlXHjzHPYiL/sPj4yIJaKuDluYBjdz8gopsxQLepaXcKoXMCc5ZEg26QWpDXzp8w3BXqewR3YEwPYmLDnfHe9J/2yVS2+mVRJynQIqMgF8fFm9pGJT7RNPH+6GpR1npoyJ+Uqa+7IRAszcLdF2eJYFHptYr5BSf0Y0OfIi4wYb8RsDstvxRJxGPry3yOFu5tuO1OdojaXH0DJVUNeasP2A8snJ0gJbyiNqsR+/RGNDPZ1e3RVmUxeyL0YF2SYZW+bNU2uiwmeeXXW88/Ubya3/C16NN3sXP3uTjW3f5Ap/e3n/Z2+PsN9XcsiF6aV3qwRU+y9aEgteqOHBI6CmHb6YVrqe2NWbEe+vNvDelHU/ZfzZXdFKfOf0jS+xSOkuPljh6f201hvP3BN+j2g/ar8nV/+L0H5EKn53T76CefR8j3Kec90IHu7nAwI77V9Khsrwgo9VGwMN2Tyf/BAAA//9SG2qDwAoAAA==\n\n- path: /etc/kubernetes/addons/kube-proxy-daemonset.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/5RSy44TMRC85ytaczfeXEfABQ5ceEgrcXc8tYkVPwZ3OyR/jzxDMs5uNiw+WdXt6uoqm9H9RGaXYk84CmK9sj6sNxCzXu1dHHr6bBBSfISsAsQMRky/IvJmA8/1RrQvG+QIAb9zSVtfWJAVIx+cRU+d5IJu6rQpjCkiSj89UmNOx9NUEYfcU0wDVkTRBDzrqBCPxp5xPrEgrHiErSIEYfRGMAtqhdbTir0v44UUovOI+WEU4yLyhUxVsmDisLAr6vTuNCJX7q6Br8co6pSqLTbFJ7f9oA8ma+82umIeopfaQuKC2VZL3y+efzmPehxhPy6tN0ycTwanki0aQyr4q4DlCiOyY+lp/fAQLijDluzk9ClFwVHa9jG7g/PYYuipRn4pHZIvAV9TiS2/olCRH0Z2PXUaYjWz1xZZuGto5z2YvZpKapdYroSb4Xv0p2czb7Avlr2kh1i11P+b/i3RtYnMtX+NqZt+g/xOeX+Fz342X7A2TlLaNP5KK5w170yGtmZy0D05a65MuOPwfe63rP3K0veJX4vrZlh/AgAA//9bX4Y0xgQAAA==\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/4RSTWvcQAy9+1eIvXs324ZC5lYa6KUHQ0uvRR4/vEM0H4xkt/73xWmy68B2Myeh95709Bgu4Seqhpwc4Y8hraUe5mMP42PzFNLg6BFF8hKRrIkwHtjYNUTCPUTXiuhp6lETDLoP+eBlUkNtFXUOHo52VifsnplcitvQ24H11GeuwzM6v5qZj/v7/YeGKHHEfwUrqIX9C6PVRQ2x0QK/+qooEjyro2NDpBB4y/Wf48jmT982J9y2ZohF2PAi3sSwPnkz570jX+2tz+dkHBLqWd0S11EdnYeFyCMcjb6u2Y45j4JfF93h2p6W4/Dp3p1T3EzqJpEuS/CLo8/ymxc94xJmJKh2Nfe4XEN0MitfYdsWUWE7Ododdm+7uZqjh7uHu007pGCB5RHCy3f4nAZ19HHLsBCRJ7sG3vwBl6Wb+NtLrN01O6Vmyz6Lox9fuuZvAAAA//8OA1TdBAMAAA==\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-service.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/4SOwUpEMQxF9/2KMPvquHPyESII7vPai5bpa0uSNzB/L60uXOnucnOSHBnlHWqlN6bbU7iWlpneoLeSEHa4ZHHhQFRlQ7WZiK7HBm1w2EPpj6ke5tBo31tMJ9cDp0XKGPwLj1nsc+uiORA12fHn0IakHyLa3Rx7sIE0HUZXXzJxRabn8/rnoh/w11VdzpdZGiqSd+V/hfw+wPTSM+aB8BUAAP//d9OtPhsBAAA=\n\n- path: /etc/kubernetes/addons/kube-heapster-service.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/2yOvWrEMBCEez3F4l75q4yeIGUgkH4tD4mwLIndtSFvf8h2cQfXDcN++w239APRVEug/d0tqcyBviF7inArjGc2Do4o84SsPREt2wQpMOhLqq8xb2oQrycVaDDZMDy5LLwi0Ce4dcARncXfY6GN+5eOev1Xw+q0IXZ1q2LHBn/EQOPboTGWX9jXVY0fjkiREa3KtXhUz63duW4BAAD//6ozJXX5AAAA\n\n- path: /etc/kubernetes/addons/kube-heapster-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAJbogA/6xUT2vbThC961MsOv9Wtn5NSrqgQ0jSU9OEFgqlKmaymliL9193R8Zq6Xcvsi1HVmw3hO5JvJl5M3r7ZjnnyULZSrBr9Nq1Bi0l0aMUCWMBvVYSomB5whih8RoIuwhjfU53pLMEymKIPcKZMjBHweYyZMpN5s7NNc6eEic1go+EQSzz7P9suq3ruIwBW4kdwFm6S06HKOfRNUFisWgeMFgkjFlsjIHQzsArUaZl+lRgwaBgPdEODrghiU8NO/BHg5H2MMakbwS7mJo90KBxoRUsP5veqkFEK6NeTfB39aCqnOUBo/qJQeTZ29P6eVfNLFjbjgSUvikupmaE4ooCrGPT7Hwc3MxbrMc9WLdNOHsWpjpgrJ2uivNRpNpZr+gviG9swR+QIMvHY/dCFEeM4Z3W3GNQrireTLszHjWSMkAuFLjyzqIlBfqYWfhauldb5vzIjb97oWNeVI92ObzyJegG3wdn9vkeFerqEz7uo1v8HqgWzCBBBQRZp8EgbSPJ7dfZ/d317OPl7c2/7xY9yJMtP99fXm369nU9tYYH1APxFheRg/cHFn6JISpnBdt7d8BaR0DK2QFJlDVWjcaQgfY1ZIN3RrmJDIqUBM29qwQbvDSny8hpDNtOLP32q0wX2JapKNOrLeFlt9vxzuq2TP8rU+e7fBfWOTcrFSmW6e/vXb+IGiW5sBnZAMn6w54Qx2QYiwBefekhXBHa7jNOlnm3fnkyVHuo9GH6QwqPpNPNeq8ihqWSKFhKocHuj3Y2EOsSHttIaJJnG7mlTv4EAAD//4sS0Oy/BgAA\n\n- path: \"/etc/systemd/system/kubelet.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=Kubelet\n    Requires=docker.service\n    After=docker.service\n\n    [Service]\n    Restart=always\n    ExecStartPre=/bin/mkdir -p /var/lib/kubelet\n    ExecStartPre=/bin/sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/addons/kube-proxy-daemonset.yaml\"\n    ExecStartPre=/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n    ExecStartPre=/bin/mount --make-shared /var/lib/kubelet\n    ExecStart=/usr/bin/docker run \\\n      --net=host \\\n      --pid=host \\\n      --privileged \\\n      --volume=/dev:/dev \\\n      --volume=/sys:/sys:ro \\\n      --volume=/var/run:/var/run:rw \\\n      --volume=/var/lib/docker/:/var/lib/docker:rw \\\n      --volume=/var/lib/kubelet/:/var/lib/kubelet:shared \\\n      --volume=/var/log:/var/log:rw \\\n      --volume=/etc/kubernetes/:/etc/kubernetes:ro \\\n      --volume=/srv/kubernetes/:/srv/kubernetes:ro \\\n        ',variables('kubernetesHyperkubeSpec'),' \\\n          /hyperkube kubelet \\\n            --api-servers=\"https://',variables('masterPrivateIp'),':443\" \\\n            --kubeconfig=/var/lib/kubelet/kubeconfig \\\n            --address=0.0.0.0 \\\n            --allow-privileged=true \\\n            --enable-server \\\n            --enable-debugging-handlers \\\n            --config=/etc/kubernetes/manifests \\\n            --cluster-dns=',variables('kubeDnsServiceIP'),' \\\n            --cluster-domain=cluster.local \\\n            --register-schedulable=false \\\n            --cloud-provider=azure \\\n            --cloud-config=/etc/kubernetes/azure.json \\\n            --v=2\n    ExecStop=/usr/bin/docker stop -t 2 kubelet\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    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\n'))]",
          "linuxConfiguration": {('#
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[variables('sshPublicKeyData')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSku')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('masterStorageAccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'vhds/',variables('masterVMNamePrefix'),copyIndex(),'-osdisk.vhd')]"
            }
          }
        }
      },
      "tags": {
        "creationSource": "[concat('acsengine-', variables('masterVMNamePrefix'), copyIndex())]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex())]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'/cse', copyIndex())]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh ',variables('tenantID'),' ',variables('subscriptionId'),' ',variables('resourceGroup'),' ',variables('location'),' ',variables('subnetName'),' ',variables('nsgName'),' ',variables('virtualNetworkName'),' ',variables('routeTableName'),' ',variables('primaryAvailablitySetName'),' ',variables('servicePrincipalClientId'),' ',variables('servicePrincipalClientSecret'),' ',variables('clientPrivateKey'),' ',variables('apiServerPrivateKey'),' ',variables('caCertificate'),' ',variables('masterFqdnPrefix'),' ',variables('kubeConfigCertificate'),' ',variables('kubeConfigPrivateKey'),' ',variables('username'),' >> /var/log/azure/cluster-provision.log 2>&1 &\" &')]"
        },
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {},
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}
